/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 1);
/******/ })
/************************************************************************/
/******/ ({

/***/ "./assets/js/frontend.js":
/*!*******************************!*\
  !*** ./assets/js/frontend.js ***!
  \*******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


;

(function () {
  var app = {
    init: function init() {
      if (typeof wpDarkModeFrontend !== 'undefined' && wpDarkModeFrontend.is_excluded) {
        return;
      }

      if (typeof elementor === 'undefined') {
        app.initDarkmode();
      }

      if (typeof wpDarkModeAdmin === 'undefined') {
        if (sessionStorage.getItem('wp_dark_mode_frontend') != 0) {
          //block from admin side
          app.checkOsMode();
        }
      }

      app.excludeBGELements();
      var darkmodeSwitch = document.querySelector('.wp-dark-mode-switch');

      if (darkmodeSwitch) {
        darkmodeSwitch.addEventListener('click', app.handleToggle);
        darkmodeSwitch.addEventListener('change', app.handleExcludes);
      }

      app.checkDarkMode();
      app.handleExcludes();
      window.addEventListener('darkmodeInit', app.checkDarkMode);
      window.addEventListener('darkmodeInit', app.handleExcludes);
      window.addEventListener('darkmodeInit', app.excludeBGELements);
      setTimeout(app.handleExcludes, 1000);
      setTimeout(app.handleExcludes, 2000);
      setTimeout(app.handleExcludes, 3000);
    },
    initDarkmode: function initDarkmode() {
      if (typeof wpDarkModeAdmin !== 'undefined') {
        return;
      }

      var is_saved = sessionStorage.getItem('wp_dark_mode_frontend');

      if (1 == is_saved) {
        document.querySelector('html').classList.add('wp-dark-mode-active');
        app.checkDarkMode();
      }

      window.dispatchEvent(new Event('darkmodeInit'));
    },
    excludeBGELements: function excludeBGELements() {
      var elements = document.querySelectorAll('header, footer, div, section');
      elements.forEach(function (element) {
        var bi = window.getComputedStyle(element, false).backgroundImage;

        if (bi !== 'none') {
          element.classList.add('wp-dark-mode-ignore');
          element.querySelectorAll('*').forEach(function (child) {
            return child.classList.add('wp-dark-mode-ignore');
          });

          if (!wpDarkModeFrontend.is_ultimate_active) {
            return;
          }

          var url = bi.slice(4, -1).replace(/"/g, "");
          var images = wpDarkModeFrontend.images;

          if (document.querySelector('html').classList.contains('wp-dark-mode-active')) {
            if (images.light_images.includes(url)) {
              var index = images.light_images.indexOf(url);
              element.style.backgroundImage = "url('".concat(images.dark_images[index], "')");
            }
          } else {
            if (images.dark_images.includes(url)) {
              var _index = images.dark_images.indexOf(url);

              element.style.backgroundImage = "url('".concat(images.light_images[_index], "')");
            }
          }
        }
      });
    },
    handleToggle: function handleToggle() {
      var html = document.querySelector('html');
      html.classList.toggle('wp-dark-mode-active');
      document.querySelectorAll('.wp-dark-mode-switcher').forEach(function (switcher) {
        return switcher.classList.toggle('active');
      });
      app.checkDarkMode();
      var is_saved = html.classList.contains('wp-dark-mode-active') ? 1 : 0;

      if (typeof wpDarkModeAdmin === 'undefined') {
        sessionStorage.setItem('wp_dark_mode_frontend', is_saved);
      } else {
        sessionStorage.setItem('wp_dark_mode_admin', is_saved);
      }

      window.dispatchEvent(new Event('darkmodeInit'));
    },

    /** check if the darkmode is active or not on initialize */
    checkDarkMode: function checkDarkMode() {
      if (document.querySelector('html').classList.contains('wp-dark-mode-active')) {
        document.querySelectorAll('.wp-dark-mode-switcher').forEach(function (switcher) {
          return switcher.classList.add('active');
        });
      } else {
        document.querySelectorAll('.wp-dark-mode-switcher').forEach(function (switcher) {
          return switcher.classList.remove('active');
        });
      }
    },
    checkOsMode: function checkOsMode() {
      if (!wpDarkModeFrontend.enable_os_mode) {
        return;
      }

      var darkMediaQuery = window.matchMedia('(prefers-color-scheme: dark)');

      try {
        // Chrome & Firefox
        darkMediaQuery.addEventListener('change', function (e) {
          var newColorScheme = e.matches ? 'dark' : 'light';

          if ('dark' === newColorScheme) {
            document.querySelector('html').classList.add('wp-dark-mode-active');
          } else {
            document.querySelector('html').classList.remove('wp-dark-mode-active');
          }

          window.dispatchEvent(new Event('darkmodeInit'));
        });
      } catch (e1) {
        try {
          // Safari
          darkMediaQuery.addListener(function (e) {
            var newColorScheme = e.matches ? 'dark' : 'light';

            if ('dark' === newColorScheme) {
              document.querySelector('html').classList.add('wp-dark-mode-active');
            } else {
              document.querySelector('html').classList.remove('wp-dark-mode-active');
            }

            window.dispatchEvent(new Event('darkmodeInit'));
          });
        } catch (e2) {
          console.error(e2);
        }
      }
      /** check init dark theme */


      if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {
        document.querySelector('html').classList.add('wp-dark-mode-active');
        window.dispatchEvent(new Event('darkmodeInit'));
      }
    },
    handleExcludes: function handleExcludes() {
      if (typeof wpDarkModeFrontend === 'undefined') {
        return;
      }

      var elements = document.querySelectorAll(wpDarkModeFrontend.excludes);
      elements.forEach(function (element) {
        element.classList.add('wp-dark-mode-ignore');
        var children = element.querySelectorAll('*');
        children.forEach(function (child) {
          child.classList.add('wp-dark-mode-ignore');
        });
      });
    }
  };
  document.addEventListener('DOMContentLoaded', app.init);
})();

/***/ }),

/***/ 1:
/*!*************************************!*\
  !*** multi ./assets/js/frontend.js ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! C:\xampp\htdocs\wp-dark-mode\wp-content\plugins\wp-dark-mode\assets\js\frontend.js */"./assets/js/frontend.js");


/***/ })

/******/ });
//# sourceMappingURL=data:application/json;charset=utf-8;base64,