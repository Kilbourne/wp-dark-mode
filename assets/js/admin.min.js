/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ({

/***/ "./assets/js/admin.js":
/*!****************************!*\
  !*** ./assets/js/admin.js ***!
  \****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


;

(function () {
  var app = {
    init: function init() {
      app.initDarkmode();
      app.blockSwitches();
      app.blockPresets();
      app.checkDesc();
      app.checkSwitchdDeps();
      app.checkCustomize();
      var enable_darkmode_checkbox = document.querySelector('.enable_os_mode input[type=checkbox]');

      if (enable_darkmode_checkbox) {
        enable_darkmode_checkbox.addEventListener('change', app.checkDesc);
      }

      var show_switcher_checkbox = document.querySelector('.show_switcher input[type=checkbox]');

      if (show_switcher_checkbox) {
        show_switcher_checkbox.addEventListener('change', app.checkSwitchdDeps);
      }

      var customize_colors_checkbox = document.querySelector('.customize_colors input[type=checkbox]');

      if (customize_colors_checkbox) {
        customize_colors_checkbox.addEventListener('change', app.checkCustomize);
      }
    },
    initDarkmode: function initDarkmode() {
      var is_saved = sessionStorage.getItem('wp_dark_mode_admin');

      if (wpDarkModeAdmin.enable_backend && 1 == is_saved && !wpDarkModeAdmin.is_block_editor) {
        document.querySelector('html').classList.add('wp-dark-mode-active');
        window.dispatchEvent(new Event('darkmodeInit'));
      }
    },
    blockSwitches: function blockSwitches() {
      if (wpDarkModeAdmin.is_pro_active || wpDarkModeAdmin.is_ultimate_active) {
        return;
      }

      var image_opts = document.querySelectorAll('.switch_style .image-choose-opt');
      image_opts.forEach(function (image_opt, i) {
        if (i < 2) {
          return;
        }

        image_opt.classList.add('disabled');
        var div = document.createElement('DIV');
        div.classList.add('disabled-text', 'wp-dark-mode-ignore');
        image_opt.appendChild(div);
      });
      document.querySelectorAll('.switch_text_light,.switch_text_dark,.show_above_post, .show_above_page, .excludes, .exclude_pages').forEach(function (element) {
        element.classList.add('disabled');
      });
    },
    blockPresets: function blockPresets() {
      if (wpDarkModeAdmin.is_pro_active || wpDarkModeAdmin.is_ultimate_active) {
        return;
      }

      var image_opts = document.querySelectorAll('.color_preset .image-choose-opt');
      image_opts.forEach(function (image_opt, i) {
        if (i < 2) {
          return;
        }

        image_opt.classList.add('disabled');
        var div = document.createElement('DIV');
        div.classList.add('disabled-text', 'wp-dark-mode-ignore');
        image_opt.appendChild(div);
      });
      var customize_colors_checkbox = document.querySelector('.customize_colors');

      if (customize_colors_checkbox) {
        customize_colors_checkbox.classList.add('disabled');
      }
    },
    checkDesc: function checkDesc() {
      var checkBox = document.querySelector('.enable_os_mode input[type=checkbox]');

      if (!checkBox) {
        return;
      }

      var is_darkmode_enabled = checkBox.checked;

      if (is_darkmode_enabled) {
        document.querySelector('.enable_os_mode .description').style.display = 'block';
      } else {
        document.querySelector('.enable_os_mode .description').style.display = 'none';
      }
    },
    checkSwitchdDeps: function checkSwitchdDeps() {
      var checkBox = document.querySelector('.show_switcher input[type=checkbox]');

      if (!checkBox) {
        return;
      }

      var checked = checkBox.checked;

      if (checked) {
        document.querySelector('.switcher_position, .switch_style').style.display = 'contents';
      } else {
        document.querySelector('.switcher_position, .switch_style').style.display = 'none';
      }
    },
    checkCustomize: function checkCustomize() {
      var checkBox = document.querySelector('.customize_colors input[type=checkbox]');

      if (!checkBox) {
        return;
      }

      var is_customized = checkBox.checked;

      if (is_customized) {
        document.querySelectorAll('.darkmode_bg_color, .darkmode_text_color, .darkmode_link_color').forEach(function (element) {
          element.style.display = 'table-row';
        });
      } else {
        document.querySelectorAll('.darkmode_bg_color, .darkmode_text_color, .darkmode_link_color').forEach(function (element) {
          element.style.display = 'none';
        });
      }
    }
  };
  document.addEventListener('DOMContentLoaded', app.init);
})();

if (wpDarkModeAdmin.is_pro_active) {
  if (String(wpDarkModeAdmin.pro_version) < '1.0.3') {
    ;

    (function () {
      var app = {
        init: function init() {
          //block color presets
          app.blockPresets();

          if (wpDarkModeProAdmin.is_valid_license) {
            app.checkTimeBasedDeps();
            var time_based_switch = document.querySelector('.time_based_mode input[type=checkbox]');

            if (time_based_switch) {
              time_based_switch.addEventListener('change', app.checkTimeBasedDeps);
            }
          } //admin switch


          var admin_switch = document.querySelector('.wp-admin .wp-dark-mode-switch');

          if (admin_switch) {
            admin_switch.addEventListener('change', app.handleSwitch);
          } //widget switch style


          document.querySelectorAll('.switch-style-choose-group input').forEach(function (element) {
            element.addEventListener('change', app.handleWidgetImages);
          });
        },
        blockPresets: function blockPresets() {
          if (wpDarkModeAdmin.is_ultimate_active) {
            return;
          }

          var image_opts = document.querySelectorAll('.color_preset .image-choose-opt');
          image_opts.forEach(function (image_opt, i) {
            if (i < 5) {
              return;
            }

            image_opt.classList.add('disabled');
            var div = document.createElement('DIV');
            div.classList.add('disabled-text', 'wp-dark-mode-ignore');
            image_opt.appendChild(div);
          });
          var customize_colors_checkbox = document.querySelector('.customize_colors');

          if (customize_colors_checkbox) {
            customize_colors_checkbox.classList.add('disabled');
          }
        },
        checkTimeBasedDeps: function checkTimeBasedDeps() {
          var checkBox = document.querySelector('.time_based_mode input[type=checkbox]');

          if (!checkBox) {
            return;
          }

          if (checkBox.checked) {
            document.querySelector('.start_at').classList.remove('hidden');
            document.querySelector('.end_at').classList.remove('hidden');
          } else {
            document.querySelector('.start_at').classList.add('hidden');
            document.querySelector('.end_at').classList.add('hidden');
          }
        },
        handleSwitch: function handleSwitch(e) {
          var is_checked = e.target.checked;
          sessionStorage.setItem('wp_dark_mode_admin', is_checked ? 1 : 0);
        },
        handleWidgetImages: function handleWidgetImages(e) {
          document.querySelectorAll('.switch-style-choose-group').forEach(function (element) {
            element.classList.remove('checked');
          });
          e.target.parentNode.classList.add('checked');
        }
      };
      document.addEventListener('DOMContentLoaded', app.init);
    })();
  }
}

if (wpDarkModeAdmin.is_ultimate_active) {
  if (String(wpDarkModeAdmin.pro_version) < '1.0.3') {
    ;

    (function () {
      var app = {
        init: function init() {
          document.querySelectorAll('.add_row').forEach(function (element) {
            element.addEventListener('click', app.addRow);
          });
          document.querySelectorAll('.remove_row').forEach(function (element) {
            element.addEventListener('click', app.removeRow);
          });
        },
        addRow: function addRow(e) {
          e.preventDefault();
          var html = "<td><input type=\"url\" value=\"\" name=\"wp_dark_mode_image_settings[light_images][]\">\n                            </td>\n                            <td>\n                                <input type=\"url\" value=\"\" name=\"wp_dark_mode_image_settings[dark_images][]\">\n                            </td>\n                            <td>\n                                <a href=\"#\" class=\"add_row button button-primary\">Add</a>\n                                <a href=\"#\" class=\"remove_row button button-link-delete\">Remove</a>\n                            </td>";
          var tr = document.createElement('TR');
          tr.innerHTML = html;
          tr.querySelector('.add_row').addEventListener('click', app.addRow);
          tr.querySelector('.remove_row').addEventListener('click', app.removeRow);
          document.querySelector('.image-settings-table tbody').appendChild(tr);
        },
        removeRow: function removeRow(e) {
          e.preventDefault();
          e.target.parentNode.parentNode.remove();
        }
      };
      document.addEventListener('DOMContentLoaded', app.init);
    })();
  }
}

/***/ }),

/***/ 0:
/*!**********************************!*\
  !*** multi ./assets/js/admin.js ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! C:\xampp\htdocs\test\wp-content\plugins\wp-dark-mode\assets\js\admin.js */"./assets/js/admin.js");


/***/ })

/******/ });
//# sourceMappingURL=data:application/json;charset=utf-8;base64,